{"version":3,"sources":["firebase.js","components/Layout/index.js","components/Home/index.js","components/Subreddits/index.js","components/CreatePostForm/index.js","db.js","components/Subreddit/index.js","store/actions/auth.js","store/reducers/subredditsReducer.js","App.js","store/actions/subreddits.js","store/reducers/authReducer.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","Layout","user","children","useState","isNameVisible","setIsNameVisible","logInWithGoogle","a","provider","auth","GoogleAuthProvider","signInWithPopup","logOutWithGoogle","signOut","className","to","onClick","src","image","referrerPolicy","onMouseOver","onMouseLeave","name","Home","Subreddits","props","subreddits","map","subreddit","id","CreatePostForm","onCreatePost","isOpen","setIsOpen","title","description","url","formValues","setFormValues","handleFormValues","label","value","target","onSubmit","e","preventDefault","htmlFor","required","type","onChange","rows","db","firestore","isImage","indexOfQuestionMark","indexOf","spliced","substring","RegExp","test","Subreddit","posts","setPosts","users","setUsers","params","useParams","useSelector","state","find","useEffect","unsubsrcibe","collection","where","onSnapshot","snapshot","forEach","doc","push","data","length","userIds","Set","post","user_id","userId","get","handleCreatePost","subreddit_id","created_at","FieldValue","serverTimestamp","updated_at","add","toUpperCase","ind","toDate","toLocaleString","href","authSuccess","initialState","subredditsReducer","action","App","dispatch","useDispatch","onAuthStateChanged","createdUser","uid","displayName","photoURL","set","setSubreddits","exact","path","render","authReducer","rootReducer","combineReducers","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","ReactDOM","StrictMode","basename","document","getElementById"],"mappings":"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","file":"static/js/main.d4c10eaf.chunk.js","sourcesContent":["import firebase from 'firebase'\r\n\r\n// Your web app's Firebase configuration\r\nvar firebaseConfig = {\r\n    apiKey: \"AIzaSyBydRiEoZE1fbjHXOEsq7MoIOn6IqXRsZ4\",\r\n    authDomain: \"reddit-clone-cef6c.firebaseapp.com\",\r\n    projectId: \"reddit-clone-cef6c\",\r\n    storageBucket: \"reddit-clone-cef6c.appspot.com\",\r\n    messagingSenderId: \"268435638413\",\r\n    appId: \"1:268435638413:web:be2d494bf63b8ed16e7ac4\"\r\n};\r\n// Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nexport default firebase","import React, { useState } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport firebase from '../../firebase'\r\nimport './Layout.css'\r\n\r\nconst Layout = ({ user, children }) => {\r\n    const [isNameVisible, setIsNameVisible] = useState(false)\r\n\r\n    const logInWithGoogle = async () => {\r\n        const provider = new firebase.auth.GoogleAuthProvider();\r\n        await firebase.auth().signInWithPopup(provider)\r\n    }\r\n\r\n    const logOutWithGoogle = async () => {\r\n        await firebase.auth().signOut()\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <nav className=\"navbar navbar-dark bg-primary\">\r\n                <Link className=\"navbar-brand\" to=\"/\">Reddit clone</Link>\r\n                {!user && (\r\n                    <button onClick={logInWithGoogle} className=\"btn btn-secondary my-2 my-sm-0\">Login with Google</button>\r\n                )}\r\n                {user && (\r\n                    <section className=\"menu\">\r\n                        <div className=\"menu__user-details\">\r\n                            <img\r\n                                src={user.image}\r\n                                referrerPolicy=\"no-referrer\"\r\n                                onMouseOver={() => setIsNameVisible(true)}\r\n                                onMouseLeave={() => setIsNameVisible(false)} />\r\n                            {isNameVisible && (\r\n                                <div className=\"menu__tooltip\">\r\n                                    <span className=\"arrow\"></span>\r\n                                    {user.name}\r\n                                </div>\r\n                            )}\r\n                        </div>\r\n                        <button\r\n                            onClick={logOutWithGoogle}\r\n                            className=\"btn btn-secondary my-2 my-sm-0\">\r\n                            Logout\r\n                        </button>\r\n                    </section>\r\n                )}\r\n            </nav >\r\n            <main className=\"container mt-3\">\r\n                {children}\r\n            </main>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Layout","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nconst Home = () => {\r\n    return (\r\n        <div>\r\n           <Link to=\"/subreddits\">Subreddits</Link>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Home\r\n","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nconst Subreddits = (props) => {\r\n    return (\r\n        <div>\r\n            <h2 className=\"text-muted mb-5\">Subreddits</h2>\r\n            <ul className=\"list-group\">\r\n                {props.subreddits.map(subreddit => (\r\n                    <Link className=\"text-info\" key={subreddit.id} to={`/r/${subreddit.name}`}>\r\n                        <li className=\"list-group-item d-flex justify-content-between align-items-center\">\r\n                            {subreddit.name}\r\n                            <span></span>\r\n                        </li>\r\n                    </Link>\r\n                ))}\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Subreddits\r\n","import React, { useState } from 'react'\r\n\r\nconst CreatePostForm = ({ onCreatePost }) => {\r\n    const [isOpen, setIsOpen] = useState(false)\r\n    const [formValues, setFormValues] = useState({\r\n        title: '',\r\n        description: '',\r\n        url: ''\r\n    })\r\n\r\n    const handleFormValues = label => ({ target: { value } }) => {\r\n        if (label === 'title') {\r\n            setFormValues({\r\n                ...formValues,\r\n                title: value\r\n            })\r\n        }\r\n        if (label === 'description') {\r\n            setFormValues({\r\n                ...formValues,\r\n                description: value\r\n            })\r\n        }\r\n        if (label === 'url') {\r\n            setFormValues({\r\n                ...formValues,\r\n                url: value\r\n            })\r\n        }\r\n    }\r\n\r\n    const handleCreatePost = (e) => {\r\n        e.preventDefault()\r\n        const { title, description, url } = formValues\r\n\r\n        if (title && (description || url)) {\r\n            onCreatePost(formValues)\r\n            setFormValues({\r\n                title: '',\r\n                description: '',\r\n                url: '',\r\n            })\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <button className=\"btn btn-outline-primary\" onClick={() => setIsOpen(!isOpen)}>Toggle form</button>\r\n            {isOpen && (\r\n                <form onSubmit={handleCreatePost} className=\"mt-3\">\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"title\">Title</label>\r\n                        <input\r\n                            id=\"title\"\r\n                            required\r\n                            type=\"text\"\r\n                            value={formValues.title}\r\n                            onChange={handleFormValues('title')}\r\n                            className=\"form-control\"\r\n                        />\r\n                    </div>\r\n\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"description\">Description</label>\r\n                        <textarea\r\n                            id=\"description\"\r\n                            rows=\"4\"\r\n                            value={formValues.description}\r\n                            onChange={handleFormValues('description')}\r\n                            className=\"form-control\"\r\n                        />\r\n                    </div>\r\n\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"url\">URL</label>\r\n                        <input\r\n                            id=\"url\"\r\n                            type=\"url\"\r\n                            value={formValues.url}\r\n                            onChange={handleFormValues('url')}\r\n                            className=\"form-control\"\r\n                        />\r\n                    </div>\r\n                    <button className=\"btn btn-info\">Create Post</button>\r\n                </form>\r\n            )}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default CreatePostForm\r\n","import firebase from './firebase'\r\n\r\nconst db = firebase.firestore()\r\nexport default db","import React, { useState, useEffect } from 'react'\r\nimport CreatePostForm from '../CreatePostForm'\r\nimport { useParams } from 'react-router-dom'\r\nimport { useSelector, useStore } from 'react-redux'\r\nimport db from '../../db'\r\nimport firebase from '../../firebase'\r\n\r\nimport './Subreddit.css'\r\n\r\nconst isImage = (url) => {\r\n    const indexOfQuestionMark = url.indexOf('?')\r\n    if (indexOfQuestionMark !== -1) {\r\n        const spliced = url.substring(0, indexOfQuestionMark)\r\n        return new RegExp(/(png|jpg|jpeg|gif)$/).test(spliced)\r\n    }\r\n\r\n    return new RegExp(/(png|jpg|jpeg|gif)$/).test(url)\r\n}\r\n\r\nconst Subreddit = ({ user }) => {\r\n    const [posts, setPosts] = useState([])\r\n    const [users, setUsers] = useState({})\r\n    const params = useParams()\r\n    const subreddit = useSelector(state => state.subreddits.find(subreddit => subreddit.name === params.name))\r\n\r\n    useEffect(() => {\r\n        if (subreddit) {\r\n            const unsubsrcibe = db\r\n                .collection('posts')\r\n                .where('subreddit_id', '==', subreddit.id)\r\n                .onSnapshot(snapshot => {\r\n                    const posts = []\r\n                    snapshot.forEach(doc => {\r\n                        posts.push({\r\n                            ...doc.data(),\r\n                            id: doc.id\r\n                        })\r\n                    })\r\n                    setPosts(posts)\r\n                })\r\n\r\n            return () => {\r\n                unsubsrcibe()\r\n            }\r\n        }\r\n    }, [subreddit])\r\n\r\n    useEffect(async () => {\r\n        if (posts.length) {\r\n            const userIds = [...new Set(posts.map(post => post.user_id))]\r\n            let users = {}\r\n            for (let userId of userIds) {\r\n                const user = await db.collection('users').doc(userId).get() \r\n                users[userId] = user.data()\r\n            }\r\n\r\n            setUsers(users)\r\n        }\r\n    }, [posts])\r\n\r\n    const handleCreatePost = async (formValues) => {\r\n        const post = {\r\n            title: formValues.title,\r\n            description: formValues.description,\r\n            url: formValues.url,\r\n            user_id: user.id,\r\n            subreddit_id: subreddit.id,\r\n            created_at: firebase.firestore.FieldValue.serverTimestamp(),\r\n            updated_at: firebase.firestore.FieldValue.serverTimestamp()\r\n        }\r\n        await db.collection('posts').add(post)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h2 className=\"text-muted mb-5\">{params.name.toUpperCase()}</h2>\r\n            {user ? (\r\n                <CreatePostForm onCreatePost={handleCreatePost} />\r\n            ) : (\r\n                    <span className=\"text-muted\">Please log in to create a post</span>\r\n                )}\r\n\r\n            <section className=\"mt-5\">\r\n                {posts.map((post, ind) => (\r\n                    <div key={post.id} className=\"card mb-3\">\r\n                        <div className=\"card__flex g-0\">\r\n                            <div className=\"card__col-left\">^</div>\r\n                            <div className=\"card__col-right\">\r\n                                <div className=\"card-body pt-1\">\r\n                                    <span className=\"card__user\">Posted by {users[post.user_id].name}</span>\r\n                                    <span className=\"card__date\">{post.created_at.toDate().toLocaleString()}</span>\r\n                                    <h5 className=\"card-title mt-2\">{post.title}</h5>\r\n                                    <p className=\"card-text\">{post.description}</p>\r\n                                    {(post.url && isImage(post.url)) && <img src={post.url} />}\r\n                                    {post.url && !isImage(post.url) && <a href={post.url} target=\"_blank\">{post.url}</a>}\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                ))}\r\n            </section>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Subreddit\r\n","export const authSuccess = (user) => {\r\n    return {\r\n        type: 'AUTH_SUCCESS',\r\n        user\r\n    }\r\n}\r\n\r\nexport const logout = () => {\r\n    return {\r\n        type: 'LOGOUT'\r\n    }\r\n}\r\n","const initialState = []\r\n\r\nconst subredditsReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case 'SET_SUBREDDITS':\r\n            return action.subreddits\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default subredditsReducer","import React, { useEffect } from 'react'\nimport Layout from './components/Layout'\nimport Home from './components/Home'\nimport Subreddits from './components/Subreddits'\nimport Subreddit from './components/Subreddit'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { authSuccess, logout } from './store/actions/auth'\nimport { setSubreddits } from './store/actions/subreddits'\n\nimport { Switch, Route } from 'react-router'\nimport firebase from './firebase'\nimport db from './db'\n\nimport 'bootswatch/dist/journal/bootstrap.min.css'\nimport './App.css';\n\nfunction App() {\n  const user = useSelector(state => state.auth.user)\n  const subreddits = useSelector(state => state.subreddits)\n\n  const dispatch = useDispatch()\n\n  useEffect(() => {\n    firebase.auth().onAuthStateChanged(async user => { //event listener when authentication state changes(after clicking on login button)\n      if (user) {\n        const createdUser = {\n          id: user.uid,\n          name: user.displayName,\n          image: user.photoURL,\n          created_at: firebase.firestore.FieldValue.serverTimestamp()\n        }\n\n        await db.collection('users').doc(createdUser.id).set(createdUser)\n        dispatch(authSuccess(createdUser))\n      } else {\n        dispatch(logout())\n      }\n    })\n  }, [])\n\n  useEffect(() => { //non so se è l soluzione migliore, perchè gestire subreddits qui invece che nel suo component è un po' strano... però funziona. Il problema è legato alle implicazioni che firebase comporta. INfatti se non mi collego al db, non ottengo la collezione. Ma la connessione al db veniva effettuata nel mount, e nello stato precedente Subreddits component giustamente non venendo montato, non aveva modo di connettersi al db, quindi subreddits rimaneva vuoto: [], quindi la logica dentro Subreddit component si interrompeva (essendo subreddits array vuoto, il find ritornava undefined... da approfondire!!!)\n    const unsubsrcibe = db\n      .collection('subreddits')\n      .onSnapshot(snapshot => {\n        const subreddits = []\n        snapshot.forEach(doc => {\n          subreddits.push(doc.data())\n        })\n\n        dispatch(setSubreddits(subreddits))\n      })\n\n    return () => {\n      unsubsrcibe()\n    }\n  }, [])\n\n  return (\n    <div className=\"App\">\n      <Layout user={user}>\n        <Switch>\n          <Route exact path=\"/\">\n            <Home />\n          </Route>\n          <Route path=\"/subreddits\" render={() => <Subreddits subreddits={subreddits}/> } />\n          <Route path=\"/r/:name\">\n            <Subreddit user={user} />\n          </Route>\n        </Switch>\n      </Layout>\n    </div>\n  );\n}\n\nexport default App;\n","import subredditsReducer from \"../reducers/subredditsReducer\"\r\n\r\nexport const setSubreddits = (subreddits) => {\r\n    return {\r\n        type: 'SET_SUBREDDITS',\r\n        subreddits\r\n    }\r\n}","const initialState = {\r\n    user: null\r\n}\r\n\r\nconst authReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case 'AUTH_SUCCESS':\r\n            return {\r\n                user: action.user\r\n            }\r\n        case 'LOGOUT':\r\n            return {\r\n                user: null\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default authReducer","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nimport { createStore, combineReducers, compose, applyMiddleware } from 'redux'\nimport { Provider } from 'react-redux'\nimport thunk from 'redux-thunk'\nimport authReducer from './store/reducers/authReducer'\nimport subredditsReducer from './store/reducers/subredditsReducer'\n\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\n\nconst rootReducer = combineReducers({\n  auth: authReducer,\n  subreddits: subredditsReducer,\n})\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunk)))\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <BrowserRouter basename=\"/reddit-clone\">\n        <App />\n      </BrowserRouter>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n"],"sourceRoot":""}