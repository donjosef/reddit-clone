{"version":3,"sources":["firebase.js","components/Layout/index.js","components/Home/index.js","components/Subreddits/index.js","components/CreatePostForm/index.js","components/PostCard/index.js","db.js","components/Subreddit/index.js","store/actions/auth.js","store/reducers/subredditsReducer.js","App.js","store/actions/subreddits.js","store/reducers/authReducer.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","Layout","user","children","useState","isNameVisible","setIsNameVisible","logInWithGoogle","a","provider","auth","GoogleAuthProvider","signInWithPopup","logOutWithGoogle","signOut","className","to","onClick","src","image","referrerPolicy","onMouseOver","onMouseLeave","name","Home","Subreddits","props","subreddits","map","subreddit","id","CreatePostForm","mode","isOpen","onToggleForm","onCreatePost","title","description","url","formValues","setFormValues","handleFormValues","label","value","target","style","display","justifyContent","type","aria-label","onSubmit","e","preventDefault","htmlFor","required","onChange","rows","toUpperCase","getUserData","isImage","indexOfQuestionMark","indexOf","spliced","substring","RegExp","test","PostCard","post","vote","onVotePost","onDeletePost","users","isPopoverOpen","setIsPopoverOpen","user_id","created_at","toDate","toLocaleString","padding","width","href","db","firestore","Subreddit","posts","setPosts","setUsers","votes","setVotes","isFormOpen","setIsFormOpen","formMode","setFormMode","params","useParams","useSelector","state","find","useEffect","unsubsrcibe","collection","where","orderBy","onSnapshot","snapshot","forEach","doc","push","data","length","userIds","Set","userId","get","handleCreatePost","subreddit_id","FieldValue","serverTimestamp","updated_at","add","handleDeletePost","postId","delete","handleVotePost","operation","votesRef","post_id","exists","set","size","handleOpenForm","ind","authSuccess","initialState","subredditsReducer","action","App","dispatch","useDispatch","onAuthStateChanged","createdUser","uid","displayName","photoURL","setSubreddits","exact","path","render","authReducer","rootReducer","combineReducers","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","ReactDOM","StrictMode","basename","document","getElementById"],"mappings":"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","file":"static/js/main.221b3da3.chunk.js","sourcesContent":["import firebase from 'firebase'\r\n\r\n// Your web app's Firebase configuration\r\nvar firebaseConfig = {\r\n    apiKey: \"AIzaSyBydRiEoZE1fbjHXOEsq7MoIOn6IqXRsZ4\",\r\n    authDomain: \"reddit-clone-cef6c.firebaseapp.com\",\r\n    projectId: \"reddit-clone-cef6c\",\r\n    storageBucket: \"reddit-clone-cef6c.appspot.com\",\r\n    messagingSenderId: \"268435638413\",\r\n    appId: \"1:268435638413:web:be2d494bf63b8ed16e7ac4\"\r\n};\r\n// Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nexport default firebase","import React, { useState } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport firebase from '../../firebase'\r\nimport './Layout.css'\r\n\r\nconst Layout = ({ user, children }) => {\r\n    const [isNameVisible, setIsNameVisible] = useState(false)\r\n\r\n    const logInWithGoogle = async () => {\r\n        const provider = new firebase.auth.GoogleAuthProvider();\r\n        await firebase.auth().signInWithPopup(provider)\r\n    }\r\n\r\n    const logOutWithGoogle = async () => {\r\n        await firebase.auth().signOut()\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <nav className=\"navbar navbar-dark bg-primary\">\r\n                <Link className=\"navbar-brand\" to=\"/\">Reddit clone</Link>\r\n                {!user && (\r\n                    <button onClick={logInWithGoogle} className=\"btn btn-secondary my-2 my-sm-0\">Login with Google</button>\r\n                )}\r\n                {user && (\r\n                    <section className=\"menu\">\r\n                        <div className=\"menu__user-details\">\r\n                            <img\r\n                                src={user.image}\r\n                                referrerPolicy=\"no-referrer\"\r\n                                onMouseOver={() => setIsNameVisible(true)}\r\n                                onMouseLeave={() => setIsNameVisible(false)} />\r\n                            {isNameVisible && (\r\n                                <div className=\"menu__tooltip\">\r\n                                    <span className=\"arrow\"></span>\r\n                                    {user.name}\r\n                                </div>\r\n                            )}\r\n                        </div>\r\n                        <button\r\n                            onClick={logOutWithGoogle}\r\n                            className=\"btn btn-secondary my-2 my-sm-0\">\r\n                            Logout\r\n                        </button>\r\n                    </section>\r\n                )}\r\n            </nav >\r\n            <main className=\"container mt-3\">\r\n                {children}\r\n            </main>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Layout","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nconst Home = () => {\r\n    return (\r\n        <div>\r\n           <Link to=\"/subreddits\">Subreddits</Link>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Home\r\n","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nconst Subreddits = (props) => {\r\n    return (\r\n        <div>\r\n            <h2 className=\"text-muted mb-5\">Subreddits</h2>\r\n            <ul className=\"list-group\">\r\n                {props.subreddits.map(subreddit => (\r\n                    <Link className=\"text-info\" key={subreddit.id} to={`/r/${subreddit.name}`}>\r\n                        <li className=\"list-group-item d-flex justify-content-between align-items-center\">\r\n                            {subreddit.name}\r\n                            <span></span>\r\n                        </li>\r\n                    </Link>\r\n                ))}\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Subreddits\r\n","import React, { useState } from 'react'\r\nimport './CreatePostForm.css'\r\n\r\nconst CreatePostForm = ({ mode, isOpen, onToggleForm, onCreatePost }) => {\r\n    const [formValues, setFormValues] = useState({\r\n        title: '',\r\n        description: '',\r\n        url: ''\r\n    })\r\n\r\n    const handleFormValues = label => ({ target: { value } }) => {\r\n        if (label === 'title') {\r\n            setFormValues({\r\n                ...formValues,\r\n                title: value\r\n            })\r\n        }\r\n        if (label === 'description') {\r\n            setFormValues({\r\n                ...formValues,\r\n                description: value\r\n            })\r\n        }\r\n        if (label === 'url') {\r\n            setFormValues({\r\n                ...formValues,\r\n                url: value\r\n            })\r\n        }\r\n    }\r\n\r\n    const handleCreatePost = (e) => {\r\n        e.preventDefault()\r\n        const { title, description, url } = formValues\r\n\r\n        if (title && (description || url)) {\r\n            onCreatePost(formValues)\r\n            setFormValues({\r\n                title: '',\r\n                description: '',\r\n                url: '',\r\n            })\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <button className=\"btn btn-outline-primary\" onClick={onToggleForm}>Toggle form</button>\r\n            {isOpen && (\r\n                <div className=\"modal\">\r\n                    <div className=\"modal-dialog\">\r\n                        <div className=\"modal-content\">\r\n                            <div \r\n                                className=\"modal-header\" \r\n                                style={{display: 'flex', justifyContent: 'flex-end'}}>\r\n                                <button\r\n                                    type=\"button\"\r\n                                    onClick={onToggleForm}\r\n                                    className=\"btn btn-outline-primary\"\r\n                                    aria-label=\"Close\">\r\n                                        X\r\n                                </button>\r\n                            </div>\r\n                            <div className=\"modal-body\">\r\n                                <form onSubmit={handleCreatePost} className=\"mt-3\">\r\n                                    <div className=\"form-group\">\r\n                                        <label htmlFor=\"title\">Title</label>\r\n                                        <input\r\n                                            id=\"title\"\r\n                                            required\r\n                                            type=\"text\"\r\n                                            value={formValues.title}\r\n                                            onChange={handleFormValues('title')}\r\n                                            className=\"form-control\"\r\n                                        />\r\n                                    </div>\r\n\r\n                                    <div className=\"form-group\">\r\n                                        <label htmlFor=\"description\">Description</label>\r\n                                        <textarea\r\n                                            id=\"description\"\r\n                                            rows=\"4\"\r\n                                            value={formValues.description}\r\n                                            onChange={handleFormValues('description')}\r\n                                            className=\"form-control\"\r\n                                        />\r\n                                    </div>\r\n\r\n                                    <div className=\"form-group\">\r\n                                        <label htmlFor=\"url\">URL</label>\r\n                                        <input\r\n                                            id=\"url\"\r\n                                            type=\"url\"\r\n                                            value={formValues.url}\r\n                                            onChange={handleFormValues('url')}\r\n                                            className=\"form-control\"\r\n                                        />\r\n                                    </div>\r\n                                    <button className=\"btn btn-info\">{mode.toUpperCase()}</button>\r\n                                </form>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default CreatePostForm\r\n","import React, { useState } from 'react'\r\nimport './PostCard.css'\r\n\r\nconst getUserData = user => {\r\n    return user ? user : ''\r\n}\r\n\r\nconst isImage = (url) => {\r\n    const indexOfQuestionMark = url.indexOf('?')\r\n    if (indexOfQuestionMark !== -1) {\r\n        const spliced = url.substring(0, indexOfQuestionMark)\r\n        return new RegExp(/(png|jpg|jpeg|gif)$/).test(spliced)\r\n    }\r\n\r\n    return new RegExp(/(png|jpg|jpeg|gif)$/).test(url)\r\n}\r\n\r\nconst PostCard = ({ post, vote, onVotePost, onDeletePost, user, users, onToggleForm }) => {\r\n    const [isPopoverOpen, setIsPopoverOpen] = useState(false)\r\n\r\n    return (\r\n        <div className=\"card mb-3\">\r\n            <div className=\"card__flex g-0\">\r\n                <div className=\"card__col-left\">\r\n                    <span onClick={() => onVotePost(post.id, 'add')} className=\"card__vote-up\">\r\n                        <img src=\"https://cdn4.iconfinder.com/data/icons/ionicons/512/icon-arrow-up-b-256.png\"/>\r\n                    </span>\r\n                    <span className=\"card__vote\">{vote}</span>\r\n                    <span onClick={() => onVotePost(post.id, 'delete')} className=\"card__vote-down\">\r\n                        <img src=\"https://cdn4.iconfinder.com/data/icons/ionicons/512/icon-arrow-down-b-256.png\"/>\r\n                    </span>\r\n                </div>\r\n                <div className=\"card__col-right\">\r\n                    <div className=\"card-body pt-1\">\r\n                        <div className=\"card__header\">\r\n                            <img\r\n                                className=\"userImg\"\r\n                                src={getUserData(users[post.user_id]).image} />\r\n                            <span\r\n                                className=\"card__user\">\r\n                                Posted by {getUserData(users[post.user_id]).name}\r\n                            </span>\r\n                            <span\r\n                                className=\"card__date\">\r\n                                {post.created_at ? post.created_at.toDate().toLocaleString() : ''}\r\n                            </span>\r\n                            {user.id === post.user_id && (\r\n                                <button\r\n                                    style={{ padding: 0 }}\r\n                                    className=\"btn open-popover\"\r\n                                    aria-label=\"popover menu\"\r\n                                    onClick={() => setIsPopoverOpen(!isPopoverOpen)}></button>\r\n                            )}\r\n                            {isPopoverOpen && (\r\n                                <div className=\"card__popover\">\r\n                                    <ul>\r\n                                        <li onClick={onToggleForm}>Update post</li>\r\n                                        <li onClick={() => onDeletePost(post.id)}>Delete Post</li>\r\n                                    </ul>\r\n                                </div>\r\n                            )}\r\n                        </div>\r\n                        <h5 className=\"card-title mt-2\">{post.title}</h5>\r\n                        <p className=\"card-text\">{post.description}</p>\r\n                        <div>\r\n                            {(post.url && isImage(post.url)) && <img style={{ width: '100%' }} src={post.url} />}\r\n                        </div>\r\n                        {post.url && !isImage(post.url) && <a href={post.url} target=\"_blank\">{post.url}</a>}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PostCard","import firebase from './firebase'\r\n\r\nconst db = firebase.firestore()\r\nexport default db","import React, { useState, useEffect } from 'react'\r\nimport CreatePostForm from '../CreatePostForm'\r\nimport PostCard from '../PostCard'\r\nimport { useParams } from 'react-router-dom'\r\nimport { useSelector, useStore } from 'react-redux'\r\nimport db from '../../db'\r\nimport firebase from '../../firebase'\r\n\r\nconst Subreddit = ({ user }) => {\r\n    const [posts, setPosts] = useState([])\r\n    const [users, setUsers] = useState({})\r\n    const [votes, setVotes] = useState({})\r\n    const [isFormOpen, setIsFormOpen] = useState(false)\r\n    const [formMode, setFormMode] = useState('')\r\n    const params = useParams()\r\n    const subreddit = useSelector(state => state.subreddits.find(subreddit => subreddit.name === params.name))\r\n\r\n    useEffect(() => {\r\n        if (subreddit) {\r\n            const unsubsrcibe = db\r\n                .collection('posts')\r\n                .where('subreddit_id', '==', subreddit.id)\r\n                .orderBy('created_at', 'desc')\r\n                .onSnapshot(snapshot => {\r\n                    const posts = []\r\n                    snapshot.forEach(doc => {\r\n                        posts.push({\r\n                            ...doc.data(),\r\n                            id: doc.id\r\n                        })\r\n                    })\r\n                    setPosts(posts)\r\n                })\r\n\r\n            return () => {\r\n                unsubsrcibe()\r\n            }\r\n        }\r\n    }, [subreddit])\r\n\r\n    useEffect(async () => {\r\n        if (posts.length) {\r\n            const userIds = [...new Set(posts.map(post => post.user_id))]\r\n            let users = {}\r\n            for (let userId of userIds) {\r\n                const user = await db.collection('users').doc(userId).get()\r\n                users[userId] = user.data()\r\n            }\r\n\r\n            setUsers(users)\r\n        }\r\n    }, [posts])\r\n\r\n    const handleCreatePost = async (formValues) => {\r\n        const post = {\r\n            title: formValues.title,\r\n            description: formValues.description,\r\n            url: formValues.url,\r\n            user_id: user.id,\r\n            subreddit_id: subreddit.id,\r\n            created_at: firebase.firestore.FieldValue.serverTimestamp(),\r\n            updated_at: firebase.firestore.FieldValue.serverTimestamp()\r\n        }\r\n        await db.collection('posts').add(post)\r\n    }\r\n\r\n    const handleDeletePost = async (postId) => {\r\n        await db.collection('posts').doc(postId).delete()\r\n    }\r\n\r\n    const handleVotePost = async (postId, operation) => {\r\n        const votesRef = db.collection('post_votes')\r\n        const doc = await votesRef.doc(postId + user.id).get()\r\n\r\n        if (operation == 'add') {\r\n            const vote = {\r\n                user_id: user.id,\r\n                post_id: postId,\r\n                subreddit_id: subreddit.id,\r\n                created_at: firebase.firestore.FieldValue.serverTimestamp()\r\n            }\r\n\r\n            if (!doc.exists) {\r\n                await votesRef.doc(postId + user.id).set(vote)\r\n                const snapshot = await db.collection('post_votes').where('post_id', '==', postId).get()\r\n\r\n                setVotes({\r\n                    ...votes,\r\n                    [postId]: snapshot.size\r\n                })\r\n\r\n            } else {\r\n                return\r\n            }\r\n        }\r\n\r\n        if (operation == 'delete') {\r\n            if (!doc.exists) {\r\n                return\r\n            } else {\r\n                await votesRef.doc(postId + user.id).delete()\r\n                //riprendere docs e settare state\r\n                const snapshot = await db.collection('post_votes').where('post_id', '==', postId).get()\r\n\r\n                setVotes({\r\n                    ...votes,\r\n                    [postId]: snapshot.size\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    const handleOpenForm = (mode) => {\r\n        setFormMode(mode)\r\n        setIsFormOpen(!isFormOpen)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h2 className=\"text-muted mb-5\">{params.name.toUpperCase()}</h2>\r\n            {user ? (\r\n                <CreatePostForm \r\n                    mode={formMode}\r\n                    onCreatePost={handleCreatePost} \r\n                    isOpen={isFormOpen} \r\n                    onToggleForm={() => handleOpenForm('create')} />\r\n            ) : (\r\n                    <span className=\"text-muted\">Please log in to create a post</span>\r\n                )}\r\n\r\n            <section className=\"mt-5\">\r\n                {posts.map((post, ind) => (\r\n                    <PostCard\r\n                        user={user}\r\n                        key={post.id}\r\n                        post={post}\r\n                        vote={votes[post.id]}\r\n                        onDeletePost={handleDeletePost}\r\n                        onVotePost={handleVotePost}\r\n                        users={users}\r\n                        onToggleForm={() => handleOpenForm('update')} />\r\n                ))}\r\n            </section>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Subreddit\r\n","export const authSuccess = (user) => {\r\n    return {\r\n        type: 'AUTH_SUCCESS',\r\n        user\r\n    }\r\n}\r\n\r\nexport const logout = () => {\r\n    return {\r\n        type: 'LOGOUT'\r\n    }\r\n}\r\n","const initialState = []\r\n\r\nconst subredditsReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case 'SET_SUBREDDITS':\r\n            return action.subreddits\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default subredditsReducer","import React, { useEffect } from 'react'\nimport Layout from './components/Layout'\nimport Home from './components/Home'\nimport Subreddits from './components/Subreddits'\nimport Subreddit from './components/Subreddit'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { authSuccess, logout } from './store/actions/auth'\nimport { setSubreddits } from './store/actions/subreddits'\n\nimport { Switch, Route } from 'react-router'\nimport firebase from './firebase'\nimport db from './db'\n\nimport 'bootswatch/dist/journal/bootstrap.min.css'\nimport './App.css';\n\nfunction App() {\n  const user = useSelector(state => state.auth.user)\n  const subreddits = useSelector(state => state.subreddits)\n\n  const dispatch = useDispatch()\n\n  useEffect(() => {\n    firebase.auth().onAuthStateChanged(async user => { //event listener when authentication state changes(after clicking on login button)\n      if (user) {\n        const createdUser = {\n          id: user.uid,\n          name: user.displayName,\n          image: user.photoURL,\n          created_at: firebase.firestore.FieldValue.serverTimestamp()\n        }\n\n        await db.collection('users').doc(createdUser.id).set(createdUser)\n        dispatch(authSuccess(createdUser))\n      } else {\n        dispatch(logout())\n      }\n    })\n  }, [])\n\n  useEffect(() => { //non so se è l soluzione migliore, perchè gestire subreddits qui invece che nel suo component è un po' strano... però funziona. Il problema è legato alle implicazioni che firebase comporta. INfatti se non mi collego al db, non ottengo la collezione. Ma la connessione al db veniva effettuata nel mount, e nello stato precedente Subreddits component giustamente non venendo montato, non aveva modo di connettersi al db, quindi subreddits rimaneva vuoto: [], quindi la logica dentro Subreddit component si interrompeva (essendo subreddits array vuoto, il find ritornava undefined... da approfondire!!!)\n    const unsubsrcibe = db\n      .collection('subreddits')\n      .onSnapshot(snapshot => {\n        const subreddits = []\n        snapshot.forEach(doc => {\n          subreddits.push(doc.data())\n        })\n\n        dispatch(setSubreddits(subreddits))\n      })\n\n    return () => {\n      unsubsrcibe()\n    }\n  }, [])\n\n  return (\n    <div className=\"App\">\n      <Layout user={user}>\n        <Switch>\n          <Route exact path=\"/\">\n            <Home />\n          </Route>\n          <Route path=\"/subreddits\" render={() => <Subreddits subreddits={subreddits}/> } />\n          <Route path=\"/r/:name\">\n            <Subreddit user={user} />\n          </Route>\n        </Switch>\n      </Layout>\n    </div>\n  );\n}\n\nexport default App;\n","import subredditsReducer from \"../reducers/subredditsReducer\"\r\n\r\nexport const setSubreddits = (subreddits) => {\r\n    return {\r\n        type: 'SET_SUBREDDITS',\r\n        subreddits\r\n    }\r\n}","const initialState = {\r\n    user: null\r\n}\r\n\r\nconst authReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case 'AUTH_SUCCESS':\r\n            return {\r\n                user: action.user\r\n            }\r\n        case 'LOGOUT':\r\n            return {\r\n                user: null\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default authReducer","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nimport { createStore, combineReducers, compose, applyMiddleware } from 'redux'\nimport { Provider } from 'react-redux'\nimport thunk from 'redux-thunk'\nimport authReducer from './store/reducers/authReducer'\nimport subredditsReducer from './store/reducers/subredditsReducer'\n\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\n\nconst rootReducer = combineReducers({\n  auth: authReducer,\n  subreddits: subredditsReducer,\n})\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunk)))\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <BrowserRouter basename=\"/reddit-clone\">\n        <App />\n      </BrowserRouter>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n"],"sourceRoot":""}